// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model BoxType {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Op          Op[]
  BlisterType BlisterType[]
}

model BlisterType {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  slots       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  boxTypeId   Int
  limitPerBox Int

  box BoxType @relation(fields: [boxTypeId], references: [id])
  Op  Op[]
}

model ProductType {
  id          Int      @id @default(autoincrement())
  name        String
  code        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Op Op[]
}

model Op {
  id                Int       @id @default(autoincrement())
  code              String
  boxTypeId         Int
  blisterTypeId     Int
  productTypeId     Int
  status            Int       @default(0)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  finishedAt        DateTime?
  quantityToProduce Int

  product ProductType @relation(fields: [productTypeId], references: [id])
  box     BoxType     @relation(fields: [boxTypeId], references: [id])
  blister BlisterType @relation(fields: [blisterTypeId], references: [id])

  OpBox OpBox[]
}

model OpBox {
  id                Int       @id @default(autoincrement())
  opId              Int
  code              String
  status            Int       @default(0)
  createdAt         DateTime  @default(now())
  packedAt          DateTime?
  breakAuthorizerId Int?

  op              Op       @relation(fields: [opId], references: [id], onDelete: Cascade)
  breakAuthorizer Manager? @relation(fields: [breakAuthorizerId], references: [id])

  OpBoxBlister OpBoxBlister[]
}

model OpBoxBlister {
  id       Int       @id @default(autoincrement())
  code     String    @default(uuid())
  opBoxId  Int
  quantity Int       @default(0)
  packedAt DateTime?

  opBox OpBox @relation(fields: [opBoxId], references: [id], onDelete: Cascade)

  @@unique([opBoxId, code])
}

model Manager {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  password  String
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  OpBox OpBox[]
}
